try{
var shimmer = `Sh1mmer - Mercury Workshop<br>Website: https://sh1mmer.me/<br>GitHub: https://github.com/MercuryWorkshop/sh1mmer<br><br>Shim downloading has been taken down by Google. Use this rehosted link - https://dl.darkn.bio/ - to get a shim for your board.<br><br>Shady Hacking 1nstrument Makes Machine Enrollment Retreat:<br>-> SH1MMER is an exploit capable of completely unenrolling enterprise-managed Chromebooks. <br>-> It was found by the Mercury Workshop team and was released on January, Friday the 13th, 2023. For more info, check out the Writeup.<br>-> If this isn't working for you, you're probably on v111+. If you are on v111 - v113, use https://github.com/S-PScripts/chromebook-utilities/blob/main/Exploits/Sh1mmer%20v111%20-%20v113<br><br>What you will need:<br>-> A USB with at least 8GB of storage<br>-> A personal computer or chromebook; note that you need admin perms on Windows/MacOS<br><br>Writing to USB:<br>-> First, you'll need to find your managed Chromebook's board name. <br>This can be done by going to chrome://version on your Chromebook and copying the word after stable-channel, or with a variety of other methods.<br><br>-> If your board name is in the list below, your board has a publicly leaked RMA shim. If it's not, you'll have to source it on your own.<br>brask, brya, clapper, coral, corsola, dedede, enguarde, glimmer, grunt, hana, hatch, jacuzzi, kukui, nami, octopus, orco, pyro, reks, sentry, stout, strongbad, tidus, ultima, volteer, zork<br><br>-> First, you need to download a SH1MMER bin. Download a shim at dl.sh1mmer.me, and build it with the SH1MMER web builder.<br><br>-> Once you've obtained a MODIFIED SHIM (NOT A RAW SHIM), you can continue.<br><br>-> Download the Chromebook Recovery Utility extension on your personal computer as well.<br><br>-> Once the downloads are complete, launch the recovery utility and plug your USB into your personal computer.<br><br>-> Note: Your USB will be completely cleared and partitioned.<br><br>-> In the recovery utility window, click the settings icon and press "Use local image".<br><br>-> Select your shim file, identify your USB, and start the writing process. This will take about 10 minutes.<br><br>Executing on Chromebook:<br>-> Once writing is complete, enter recovery mode on your Chromebook. <br>This is done by pressing the power button (⏻), reload key (↻), and escape key at the same time.<br><br>-> Press Ctrl+D on this screen, then press enter.<br><br>-> It will now say something about "returning to secure mode" or that "OS verification is off". <br>You will most likely not actually be in dev mode, but the exploit will work regardless.<br><br>-> On this screen, press the power button (⏻), reload key (↻), and ESC key at the same time again! This is very important and cannot be skipped.<br><br>-> Once it re-shows the original recovery screen, plug your shimmed USB into your Chromebook, and press the power button (⏻), reload key (↻), and ESC key again. <br>After a brief black-and-white loading screen, you should be in the SH1MMER menu.<br><br>-> Play around with the UI, exit, and reboot.<br><br>Aftermath:<br>-> You will now be able to, among other things, unenroll your Chromebook. It will now behave entirely as if it is a personal computer and no longer contain spyware or blocker extensions. <br>After you do this and get past the "determining device configuration" screen, you will be able to actually turn dev mode on.<br><br>-> Note that while unenrolled, it is recommended to add your personal account first, then add your school account, then switch between the two as needed. <br>Mercury Workshop does not condone the use of SH1MMER or unenrolling to cheat in school.<br><br>-> The biggest challenges with unenrolling are connecting to the school network and taking state or national exams (since there are no kiosk apps anymore).<br><br>-> There are many methods to get a school Wi-Fi password while enrolled, including the policy netlog trick. <br>While on a school account and unenrolled, you can bypass Wi-Fi blocks by using a secure DNS such as Cloudflare 1.1.1.1 from chrome://os-settings/osPrivacy.<br>It is also recommended to enable "MAC Address Randomization" in chrome://flags to stay hidden.<br><br>-> To take a kiosk exam, the safest option is to re-enroll temporarily. Instructions for doing that are hosted at https://sh1mmer.me/kiosks.txt. <br>Saving a copy of this file for future reference is probably a smart move.<br><br>`;
var cryptosmite = `CryptoSmite is an exploit capable of completely unenrolling enterprise-managed Chromebooks. It was found by FWSmasher and released on March 9th, 2024.<br>It uses stateful files to unenroll.<br><br>How it works:<br>It uses stateful backups that allow changing the encrypted contents of the stateful partition to arbritary contents. <br>This data is useful for enrollment status, so it was changed to make the device appear unenrolled. <br>On the OOBE, it starts the AutoEnrollmentController, which chains into the ash ownership system, and then the ownership system checks for a file. <br>If this file exists, it removes firmware management parameters (FWMP).<br><br>This exploit has been patched since Chrome OS 120.<br>The kernel version of your Chromebook must end with 0, 1, or 2 to perform this exploit.<br><br>Finding Kernver:<br>If you're on v120 or higher, you need to downgrade in order to use CryptoSmite. To do this, you first need to check your kernver= in Recovery Mode.<br><br>1. Boot into Recovery Mode<br>-> Hold ESC + Refresh + Power for 2 or 3 seconds.<br>-> You should be on an "Insert Recovery Media" or "Let's step you through the recovery process" screen.<br><br>2. Press TAB and look at the last digit of the kernver= line<br><br>kernver= ends with a 0 or 1!<br>-> Congratulations, you can downgrade to any version! Follow the instructions on the file "Downgrade Versions" in this repo<br><br>kernver= ends with a 2!<br>-> Congratulations, you can downgrade to v112-v119! Follow the instructions on the file "Downgrade Versions" in this repo<br><br>kernver= ends with a 3!<br>-> Sorry, you can't downgrade to v119 or lower. Wait for a new unenrollment exploit or do a dangerous hardware modification (https://blog.darkn.bio/blog/3-the-tsunami).<br><br>Using CryptoSmite:<br>1. Download a SH1MMER Prebuilt image here: https://dl.darkn.bio/SH1mmer/Prebuilt/<br><br>2. Disable OS verification (blocked or not, doesn't matter), and boot into the shim.<br><br>3. Navigate to Payloads and navigate to CryptoSmite using the arrow keys, then press Enter.<br><br>4. Type in Y then press enter, and it'll automatically reboot upon completion.<br><br>5. Proceed through the setup partially till you get to the Add Account Screen.<br><br>-> If you see an update prompt, reboot then press CTRL + ALT + E on the Wi-Fi screen.<br>-> This should allow skipping the update, or make it not appear at all.<br><br>6. Powerwash the Chromebook at the "Add Account" screen. Afterwards, it'll be fully unenrolled.<br><br>Further Reading:<br>Repository: https://github.com/FWSmasher/CryptoSmite<br>Source: https://raw.githubusercontent.com/FWSmasher/CryptoSmite/main/cryptosmite.sh<br>Website: https://docs.google.com/presentation/d/1MciRMbDEb3RJomH2gYW9C5qRVjS4P92o2s4QepoCSgY<br>Official Blogspot: https://exploitingchromium.blogspot.com/<br><br>`;
var badrecovery = `Information in this file are all from https://github.com/BinBashBanana/badrecovery!<br><br>BadRecovery:<br>-> BadRecovery (formerly OlyBmmer) is an exploit for ChromeOS devices, leveraging a vulnerability in recovery images to get arbitrary code execution or to chain to other exploits.<br>-> BadRecovery unenrolls ALL devices that are EOL before 2024, and can unenroll current supported devices on kernel version 3 or lower.<br>-> The exploit and writeup were released to the public on October 5th, 2024.<br>-> You can read the writeup here: https://github.com/BinBashBanana/badrecovery/blob/master/writeup.md<br><br>How to use:<br>You will need:<br>-> A USB drive or SD card (8 GB or larger)<br>-> Something to flash the image (dd, rufus, chromebook recovery utility, etc.)<br>-> A ChromeOS device that has not received the patch (see patch)<br><br>Preparing an image:<br>You can build an image or you can use a prebuilt image.<br><br>Using a prebuilt:<br>-> Go to [https://dl.darkn.bio/BadRecovery]<br>-> Find your board<br>-> Download the image<br>-> Go to the section below for flashing the image<br><br>Building an image:<br>-> First, you must download an official recovery image for your device. <br>-> You can download them from ChromiumDash [https://chromiumdash.appspot.com/serving-builds?deviceCategory=Chrome%20OS] or Chrome100 [https://chrome100.dev/]<br>-> See modes of operation for which version you'll need, usually r124 or older.<br>-> Be sure you've downloaded the correct image for your device.<br><br>-> Make sure to unzip the recovery image before proceeding to the next step!<br><br>-> Next, you must modify the recovery image using the script included in the repository. <br>-> You can use the web version [https://binbashbanana.github.io/badrecovery/builder.html] of the builder, though it is a fair bit slower.<br><br>-> To get the script, run these commands on a linux machine:<br>git clone https://github.com/BinBashBanana/badrecovery<br>cd badrecovery<br><br>-> To modify a recovery image using the script, run<br>sudo ./build_badrecovery.sh -i <image.bin><br>(Replace <image.bin> with the path to your recovery image bin.)<br><br>-> The script may prompt you to install required dependencies.<br>-> You can specify the mode using the --type argument (-t for short). <br>-> If left unspecified, the script will automatically determine the best option based on the version and features of the recovery image.<br><br>Example:<br>sudo ./build_badrecovery.sh -i image.bin -t postinst<br>-> The script would fail if it detected that the supplied recovery image does not meet the requirements for postinst mode (see table below).<br><br>-> The recovery image is now modified, and is ready to be flashed to a USB drive or SD card.<br><br>Flashing the image:<br>-> You can use many tools for this, e.g. balena etcher, dd, etc. but the choice you will probably want to use is Chromebook Recovery Utility<br>-> Steps for using CRU:<br>1. Install Chromebook Recovery Utility onto your personal computer. <br>(https://chrome.google.com/webstore/detail/chromebook-recovery-utili/pocpnlppkickgojjlmhdmidojbmbodfm)<br>2. Open the extension, click on the settings button in the top right-hand corner, and click "Use local image".<br>3. Select the recovery image you downloaded from chrome100.<br>4. Plug in the USB you wish to use, and follow the prompts on the screen.<br>5. On your Chromebook, press Esc+Reload+Power and follow the prompts.<br>6. On the checking for updates screen, press Ctrl+Shift+E to skip it.<br><br>Running on ChromeOS device:<br>1. First, enter recovery mode. See this article [https://support.google.com/chromebook/answer/1080595#enter] for instructions to enter Recovery.<br>2. If you are not using the unverified payload, skip to step 5. The unverified payload will not work on devices that disallow developer mode (most school devices).<br>3. ONLY if you are using the unverified payload, you will have to enter Developer Mode by pressing Ctrl+D on the recovery screen.<br>4. If you are using unverified payload, DO NOT follow the prompts to re-enable verified mode. Instead, press Ctrl+D to get around these screens.<br>5. If you are not using unverified, you are already in recovery. Otherwise, re-enter recovery.<br>6. On the "Connect a recovery device" screen, plug in your BadRecovery drive.<br>7. Profit?<br><br>Important:<br>-> On the unverified payload, you must also enter developer mode, and then enter recovery mode again for BadRecovery to work.<br>-> On Cr50 devices (most devices manufactured in 2018 or later), you must NOT be in developer mode for unenrollment to work. Ensure you are in verified mode recovery.<br>-> In any other case, you can use either verified or developer mode recovery.<br><br>-> Plug in the prepared USB drive or SD card. On the unverified payload, BadRecovery will start in only a few seconds if you've done everything correctly.<br><br>-> On any other payload, the system will recover first. This may take a while depending on the speed of your drive.<br>-> On postinst and postinst_sym payloads, BadRecovery will start partway through the recovery process.<br><br>Note:<br>-> If using postinst_sym and BadRecovery does not start, the path to the internal drive is incorrect.<br><br>-> On basic or persist payloads, reboot into verified mode after recovery completes.<br>-> Optionally, you can look at VT3 and reboot early to skip postinst and save some time.<br><br>-> On the persist payload, BadRecovery will start within a few seconds of ChromeOS booting.<br>-> On basic, you must proceed through setup and the device will unenroll using cryptosmite [https://github.com/FWSmasher/CryptoSmite]<br><br>-> When BadRecovery finishes, you will usually be able to skip the 5 minute developer mode delay by immediately switching back into recovery mode to get to developer mode. (This is not required.)<br><br>Modes of operation:<br><br>Mode	Requirements	Description<br>postinst	<br>86 ≤ version ≤ 124 AND disk layout v1 or v2	<br>ROOT-A (usb) overflows into ROOT-A (internal). Not supported on disk layout v3 (devices with minios). Replaces postinst with a custom payload and grants code execution in recovery.<br><br>postinst_sym	<br>34 ≤ version ≤ 124 AND (kernel ≥ 4.4 OR year < 2038)	<br>ROOT-A (usb) overflows into STATE (internal). Stateful installer copies payload (usb) to a symlink in STATE (internal) which points to ROOT-A (internal). Replaces postinst with a custom payload and grants code execution in recovery.<br>Caveat: internal disk device path must be known.<br><br>persist	<br>26 ≤ version ≤ 89 (untested below 68)	<br>ROOT-A (usb) overflows into STATE (internal). Encrypted data persisted through cryptosmite, code execution given in ChromeOS through crx-import.<br><br>basic	<br>26 ≤ version ≤ 119 (untested below 68)	<br>ROOT-A (usb) overflows into STATE (internal). Standard cryptosmite unenrollment payload.<br><br>unverified	<br>version ≤ 41 / version ≤ 47 (WP off) / any version (developer mode NOT blocked)	<br>Unverified ROOT-A, developer mode only! Use this for very old devices or for testing. This is an intended feature, not a bug.<br><br>-> All images will be larger than 2 and smaller than 8 GB, except unverified, which is almost always less than 1 GB.<br><br>Note:<br>For persist and basic, on version 86 and above (when postinst is available), built images are large (8.5 GB) for the legacy/v1 disk layout and even larger (17 GB) for disk layout v2. <br>postinst should always be preferred anyway. If you choose to use either of these modes anyway, some different steps must be taken while installing the recovery image.<br><br>Patch:<br>-> R125 recovery images and newer are not vulnerable to this (except unverified). <br>-> To determine if you can use this, follow these in order:<br><br>-> Was your device EOL before 2024? → YES<br>-> Are you on ChromeOS version 124 or lower? → YES<br>-> Was your device released after mid-2024? → NO<br>-> Does your device show 03 or lower as the last digits of the kernver (kernel version) on the recovery screen (press TAB, look at the line that starts with "TPM")? → YES<br>-> Higher than 03? → NO<br><br>Credits:<br>-> OlyB/BinBashBanana - most of the work here<br>-> Writable - cryptosmite [https://github.com/FWSmasher/CryptoSmite] vulnerability<br>-> Rory McNamara - encrypted_import vulnerability<br>-> Bomberfish - the name BadRecovery<br><br>-> joshuajohncohen (Helped me with this file)<br><br>Testers:<br>Big thanks to the testers:<br>-> Juliet (celes)<br>-> M_Wsecond (lars)<br>-> Kelpsea Stem (peppy, nissa)<br>-> Kxtz (relm)<br>-> Desvert (peach-pi)<br>-> WeirdTreeThing (trogdor)<br>-> cmxci (gnawty)<br><br>Dedications:<br>-> Percury Mercshop<br>-> Blake Nelsen (kinda)<br>-> Rory McNamara<br><br>`;
var brick = `GO HERE INSTEAD: https://br1ck.vercel.app/<br><br>BR1CK By Copernicium [https://discord.gg/Pb6qUkacpj]<br><br>What is BR1CK?<br>BR1CK was an exploit released October 27th, 2024 which takes advantage of an oversight while creating FWMP in the TPM. <br>It is capable of unenrolling all devices without platform FWMP on any version below v132.<br><br>How does it work?<br>The exploit works because of an issue that these chromebooks have when enrolling. <br>If you EC reset[1] ↻+⏻ at just the right time, it will corrupt some data in the FWMP TPM space[2], resulting in an unreadable FWMP, meaning we can unenroll since we aren't under it's control[3] (besides WP). <br>This allows us to boot into sh1mmer, unenroll, and fix the brick with gsctool -a -o<br><br>1. EC reset = the 2 keys used to forcefully restart the chromebook<br>2. FWMP TPM space = the data used by ChromeOS for enrollment related stuff<br>3. While FWMP is applied, protections are made to stop it from getting removed. These protections are from blocking debug cables to blocking resetting of the TPM (where it is stored)<br><br>How was this found?<br>While trying to do CRSH2TTY[1], Copernicium ended up bricking their device multiple times (a total of four). <br>One time, they randomly tried to disable write protection while unbricking with a SuzyQ (debug cable), and surprisingly, it worked! <br>This led to the discovery that FWMP doesn't apply while FWMP is corrupted. This functionality is stored in the read-only firmware, <br>which means Google would have to produce updated Chromebooks with the fix to stop this.<br>All of their exploits have been made due to CRSH2TTY in some way.<br><br>1. CRSH2TTY was a (now patched) unenrollment exploit that required resetting at specific times, similar to BR1CK<br><br>What do you need to do this?<br>1. Luck (or skill, because you can get it consistently)<br><br>2. A board that is CR50 and not TI50<br>As of October 29, 2024, if you have one of the boards listed below, you cannot do the exploit:<br>brya, brask, cherry, guybrush, skyrim, rex, nissa (maybe?), corsola, staryu, geralt<br>How do I find my board name?<br>Go to chrome://version, click Ctrl + F and search for "stable-channel" the word after that is your board<br><br>3. (PREFERABLY) access to chrome://network#logs<br><br>4. A leaked shim, a USB drive, and another pc to flash it <br>4.1. If you have a keyrolled dedede then you can buy a suzy qable [https://www.ebay.com/itm/335130747039]<br>(This seller is highly recommended, Copernicium bought from them and they're highly reputable) <br>and use alternative steps Copernicium can provide/walk you through.<br><br>How do you perform this exploit?<br>-> Backup anything that is not sync'd to your google account (mainly files)<br>-> It is a good idea to read these instructions on another device like a phone, you will not be able to access this guide on the chromebook you are using<br><br>[RECOMMENDED] For users with chrome://network#logs (can't be policy blocked, can't use OOBESCAPE):<br>1. Go to the section below this one (finding the reset times), go through the process, and memorize the time it gives you, then continue<br>2. Powerwash again by signing out, pressing Ctrl+Alt+Shift+R<br>3. Proceed through the setup, when "Getting device ready" pops up, get a stopwatch ready and wait for the next "Enterprise enrollment" screen.<br>4. When "Enterprise enrollment" pops up, start your stopwatch.<br>5. Wait until you're in the ranges of time (I would go for the higher end) the file uploader gave you, perform an EC-Reset by ↻+⏻.<br>6. If chrome turns back on and you get one of the following screens (on website), proceed, otherwise, keep trying (this may take ages but most people can get it in 2-20 tries)<br>[if you click tab on either of these, under recovery reason it should say something about an error in the TPM]<br>7. Once bricked, get a shim (this guide will be using legacy)<br>If you don't know your board name and still went on with these steps, you can look it up by entering the model name at the bottom on a site like cros.tech<br>8. Press CTRL + D, then enter to enable developer mode (It doesn't matter if it's blocked), and then ESC + ↻ + ⏻ to enter recovery mode.<br>9. Plug in your shim USB<br>If you get a screen saying "the device does not contain ChromeOS"/"no valid image" you either chose the wrong shim for your board, didn't go into developer mode, bad flash, bad file, or you've been keyrolled (and cannot continue)<br>10. When the shim boots, type D to select "Deprovision"<br>11. Next, type B to open a bash shell, this is where we'll unbrick<br>12. Type the following command:<br>gsctool -a -o<br>Press the power button whenever it spams "Press PP button now!" (this will take awhile) whenever it says "Another press will be required" it is telling you to wait, you may have to wait for a minute or even more.<br>13. Once you're at the end of that process you should reboot and you'll be back at the "Welcome!" screen. (if you don't reboot/gsctool doesn't work, proceed to the bottom section, "errors while unbricking")<br>14. Get back into developer mode by pressing ESC + ↻ + ⏻, then CTRL + D, then enter.<br>15. Either press CTRL + D if you're on a "OS verification is OFF" white screen, or enter if you're on a "You are in developer mode" black screen. <br>(keep this in mind if you want to stay in developer mode, you will have to do this each time you power it on)<br>16. You may get a "Your system is transitioning into Developer Mode" screen, wait for the 5 minute timer to finish, then follow step 15 again to boot into ChromeOS.<br>17. Start setting up your chromebook in OOBE by clicking Get Started, going through WiFi, and continuing. You should enroll.<br>18. Enter VT2 ctrl + alt + →<br>19. In VT2 type the following command: vpd -i RW_VPD -s check_enrollment=0<br>20. Powerwash or return to secure mode and once you go back through OOBE setup you should be unenrolled! <br>If you aren't, contact byte (check the credits for where to contact) for help.<br><br>[REALLY HARD AND LUCK BASED] For users WITHOUT chrome://network#logs<br>1. Powerwash by signing out, pressing Ctrl+Alt+Shift+R, and following the instructions.<br>2. Proceed with the setup until you get to the "Getting device ready" screen.<br>3. Get a stopwatch ready and wait for the "Enterprise enrollment" screen.<br>3.5. Start your stopwatch and record how long it took for enrollment to finish<br>4. Take the time it took, take around 1-1.5 seconds off the time it took to enroll, proceed<br>5. Powerwash again by following step 1, go through the setup, and when you get to the "Enterprise enrollment" screen, start your stopwatch and wait for the time you got from step 4, perform an EC-Reset by ↻+⏻.<br>6. If chrome turns back on and you get one of the following screens (on website), proceed, otherwise, keep trying (this may take ages but most people can get it in 2-20 tries)<br>[if you click tab on either of these, under recovery reason it should say something about an error in the TPM]<br>7. Once bricked, get a shim (this guide will be using legacy)<br>If you don't know your board name and still went on with these steps, you can look it up by entering the model name at the bottom on a site like cros.tech<br>8. Press CTRL + D, then enter to enable developer mode (It doesn't matter if it's blocked), and then ESC + ↻ + ⏻ to enter recovery mode.<br>9. Plug in your shim USB<br>If you get a screen saying "the device does not contain ChromeOS"/"no valid image" you either chose the wrong shim for your board, didn't go into developer mode, bad flash, bad file, or you've been keyrolled (and cannot continue)<br>10. When the shim boots, type D to select "Deprovision"<br>11. Next, type B to open a bash shell, this is where we'll unbrick<br>12. Type the following command:<br>gsctool -a -o<br>Press the power button whenever it spams "Press PP button now!" (this will take awhile) whenever it says "Another press will be required" it is telling you to wait, you may have to wait for a minute or even more.<br>13. Once you're at the end of that process you should reboot and you'll be back at the "Welcome!" screen. (if you don't reboot/gsctool doesn't work, proceed to the bottom section, "errors while unbricking")<br>14. Get back into developer mode by pressing ESC + ↻ + ⏻, then CTRL + D, then enter.<br>15. Either press CTRL + D if you're on a "OS verification is OFF" white screen, or enter if you're on a "You are in developer mode" black screen. <br>(keep this in mind if you want to stay in developer mode, you will have to do this each time you power it on)<br>16. You may get a "Your system is transitioning into Developer Mode" screen, wait for the 5 minute timer to finish, then follow step 15 again to boot into ChromeOS.<br>17. Start setting up your chromebook in OOBE by clicking Get Started, going through WiFi, and continuing. You should enroll.<br>18. Enter VT2 ctrl + alt + →<br>19. In VT2 type the following command: vpd -i RW_VPD -s check_enrollment=0<br>20. Powerwash or return to secure mode and once you go back through OOBE setup you should be unenrolled! <br>If you aren't, contact byte (check the credits for where to contact) for help.<br><br>Finding the reset times:<br>How to use this?<br>1. Powerwash (this seems unnecessary but it'll remove potential errors and make it more accurate).<br>2. Go to chrome://network#logs.<br>2. Under the options section, check all of the boxes.<br>You can just select the bottom 2 options if you care.<br>3. Place the combined-logs.tar.gz file into the dropzone in the website at the top of this file.<br>IF YOU SEE "Could not parse for 'Show enrollment screen", PLEASE CHECK THE ERRORS SECTION. IF ISSUES PERSIST, PLEASE DM @appleflyer FOR THIS (other issues go to byte).<br>4. The reset timing will appear below the dropzone.<br>Please report bugs to @ubyte on discord<br><br>Errors:<br>Q: Could not parse for 'Show enrollment screen'<br>A: Powerwash and try again, if you continue to see this ask for help in Titanium Network [.gg/unblock] or Copernicium><br><br>Q: gsctool -a -o immediately exits with no output and doesn't reboot<br>1. Run gsctool -a -k<br>2. Run gsctool -a -o<br><br>Q: gsctool -a -o isn't rebooting, but you went through the pp process<br>1. boot into the shim<br>2. go into the factory install part of sh1mmer with f + enter<br>3. select the option corressponding to tpm reset<br>4. do that twice<br>5. boot back into the shim<br>6. run the following: Deprovision, Disable Dev Block, Allow booting from USB<br>7. open the bash terminal with b<br>8. run gsctool -a -k followed by gsctool -a -o<br><br>Q: still enrolling after completing the guide<br>1. stay in dev mode (DON'T LEAVE OR U MIGHT BE COOKED!) 2. contact byte for help lol<br><br>HELP PLEASE I'M STUCK ON STEP 8<br>(check website for video)<br><br>if these don't work, please report the error to @ubyte on discord<br><br>Credits:<br>Byte - Pioneering the development of this, making the website, and coming up with the log consistency idea.<br>OlyB - Found out when we were supposed to restart, all we had left was figuring out when that was. <br>silk - Reproducing the bug first and confirming Byte wasn't insane<br>Kilo - Even if he didn't reproduce, he tested SO much (literal hours), major respect to him 🫡<br>doxr - Existing (also cleaning up the website, don't read the source)<br>peap - Gave Byte logs which made it possible to reproduce (it was a whole second inaccurate before him)<br>appleflyer - Adding direct log archive parsing functionality for calculating timings and bytes emotional support + helping a lil :><br>Windows XP - Making the guide easier to read and skid-friendly. Also a Whale Inc. member.<br>TNTCrazyError - That video.<br><br><br>`;
var pencilmethod = `Pencil Method - Unenroll by bridging pins on the motherboard.<br>The proper guide was created by Darkn: https://blog.darkn.bio/blog/3-the-tsunami#bypassing-instructions<br>!!! This can harm your Chromebook if done incorrectly. Use at your own risk. !!!<br><br>Requirements:<br>-> Conductive material (staple, tin foil, paperclip, etc.)<br>-> Scissors<br>-> Tape (optional, recommended)<br>-> USB drive or SD card with Sh1mmer flashed<br>-> Screwdriver corresponding to the screws of your Chromebook<br><br>Dismantling Hardware & Bridging Pins - Instructions:<br>1. With a screwdriver, remove each screw from the bottom of your Chromebook.<br><br>2. Disconnect the battery. The battery cable placement varies between models.<br><br>3. On the motherboard, find the 8-pin chip with pins sticking out or in. It likely has winbond or GigaDevice branding, and it may show 25Q64[xx] or 25Q128[xx] below the branding. <br>It may be located on the back of the motherboard.<br><br>4. Shape a piece of your conductive material long enough to connect to both sides of the chip and small enough to not make contact with multiple pins on either side of the chip.<br><br>5. Place one end of the conductive material on pin 3 (WP). [SOIC-8] [WSON-8]<br><br>6. Place the other end of the conductive material on pin 8 (VCC). [SOIC-8] [WSON-8]<br><br>7. If necessary, place tape on top of the chip to keep the conductive material on the pins. [SOIC-8] [WSON-8]<br><br>8. Connect the battery.<br><br>Performing the Exploit - Instructions:<br>1. Boot into Sh1mmer with the USB.<br><br>2. In the Sh1mmer menu, navigate to Utilities.<br><br>3. Select Un-Enroll Device. This is necessary even if the process fails.<br><br>4. In the Utilities menu, select Open Bash.<br><br>5. In the bash shell, run the following commands:<br>flashrom --wp-disable<br>/usr/share/vboot/bin/set_gbb_flags.sh 0x8090<br>If the commands fail, the pins are not bridged correctly.<br><br>6. Reboot the Chromebook by pressing Refresh ↻ + Power ⏻.<br><br>7. Press Ctrl + D to bypass the OS verification screen.<br><br>8. Boot into Chrome OS.<br><br>9. Press Ctrl + Alt + F2 to enter the VT2 shell.<br><br>10. Log in to the shell as root.<br><br>11. Run the following commands:<br>tpm_manager_client take_ownership<br>cryptohome --action=remove_firmware_management_parameters<br><br>12. Press Ctrl + Alt + F1 to exit the VT2 shell.<br><br>13. Press Ctrl+Alt+Shift+R.<br><br>14. Click Powerwash.<br><br>Credits:<br>Darkn | https://darkn.bio<br>https://chrose.netlify.app/detail/pencil%20method/ | AshtonDavies<br><br>`;
var a = document.createElement("p");
a.style.fontFamily = "Helvetica";
a.style.fontSize = "18px";
a.innerHTML = shimmer + "<br>" + cryptosmite + "<br>" + badrecovery + "<br>" + brick + "<br>" + pencilmethod;
var b = document.createElement("h1");
b.innerHTML = "Unenrollment Website by <a href='https://github.com/schoolexploitkid'>schoolexploitkid</a>";
b.style.fontFamily = "Courier";
b.style.fontSize = "30px";
document.body.appendChild(b);
document.body.appendChild(a);
}catch(e){alert(e)}
